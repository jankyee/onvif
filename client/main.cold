/*
 * =====================================================================================
 *
 *       Filename:  main.c
 *    Description:  简单例程测试:客户端通过ONVIF协议搜索前端设备,
 *        Created:  2013年12月26日 12时17分48秒
 *       Compiler:  gcc
 *         Author:  max_min_, 
 *
 * =====================================================================================
 */
#include "wsdd.h"
#include <stdio.h>

static struct soap* ONVIF_Initsoap(struct SOAP_ENV__Header *header, const char *was_To, const char *was_Action, int timeout)
{
	struct soap *soap = NULL; 
	unsigned char macaddr[6];
	char _HwId[1024];
	unsigned int Flagrand;
	soap = soap_new();
	if(soap == NULL)
	{
		printf("[%d]soap = NULL\n", __LINE__);
		return NULL;
	}
	 soap_set_namespaces( soap, namespaces);
	//超过5秒钟没有数据就退出
	if (timeout > 0)
	{
		soap->recv_timeout = timeout;
		soap->send_timeout = timeout;
		soap->connect_timeout = timeout;
	}
	else
	{
		//如果外部接口没有设备默认超时时间的话，我这里给了一个默认值10s
		soap->recv_timeout    = 10;
		soap->send_timeout    = 10;
		soap->connect_timeout = 10;
	}
	soap_default_SOAP_ENV__Header(soap, header);

	// 为了保证每次搜索的时候MessageID都是不相同的！因为简单，直接取了随机值
	srand((int)time(0));
	Flagrand = rand()%9000 + 1000; //保证四位整数
	macaddr[0] = 0x1; macaddr[1] = 0x2; macaddr[2] = 0x3; macaddr[3] = 0x4; macaddr[4] = 0x5; macaddr[5] = 0x6;
	sprintf(_HwId,"urn:uuid:%ud68a-1dd2-11b2-a105-%02X%02X%02X%02X%02X%02X", 
			Flagrand, macaddr[0], macaddr[1], macaddr[2], macaddr[3], macaddr[4], macaddr[5]);
	header->wsa__MessageID =(char *)malloc( 100);
	memset(header->wsa__MessageID, 0, 100);
	strncpy(header->wsa__MessageID, _HwId, strlen(_HwId));


	// 这里开始作鉴权处理了，如果有用户信息的话，就会处理鉴权问题  
    //如果设备端不需要鉴权的话，在外层调用此接口的时候把User信息填空就可以了   
    if( pUserInfo != NULL )  
    {  
        header->wsse__Security = (struct _wsse__Security *)malloc(sizeof(struct _wsse__Security));  
        memset(header->wsse__Security, 0 , sizeof(struct _wsse__Security));  
  
        header->wsse__Security->UsernameToken = (struct _wsse__UsernameToken *)calloc(1,sizeof(struct _wsse__UsernameToken));  
        header->wsse__Security->UsernameToken->Username = (char *)malloc(64);  
        memset(header->wsse__Security->UsernameToken->Username, '\0', 64);  
  
        header->wsse__Security->UsernameToken->Nonce = (char*)malloc(64);  
        memset(header->wsse__Security->UsernameToken->Nonce, '\0', 64);  
        strcpy(header->wsse__Security->UsernameToken->Nonce,"LKqI6G/AikKCQrN0zqZFlg=="); //注意这里  
  
        header->wsse__Security->UsernameToken->wsu__Created = (char*)malloc(64);  
        memset(header->wsse__Security->UsernameToken->wsu__Created, '\0', 64);  
        strcpy(header->wsse__Security->UsernameToken->wsu__Created,"2010-09-16T07:50:45Z");  
  
        strcpy(header->wsse__Security->UsernameToken->Username, pUserInfo->username);  
        header->wsse__Security->UsernameToken->Password = (struct _wsse__Password *)malloc(sizeof(struct _wsse__Password));  
        header->wsse__Security->UsernameToken->Password->Type = (char*)malloc(128);  
        memset(header->wsse__Security->UsernameToken->Password->Type, '\0', 128);  
        strcpy(header->wsse__Security->UsernameToken->Password->Type,\  
                "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest");  
        header->wsse__Security->UsernameToken->Password->__item = (char*)malloc(128);  
        ONVIF_GenrateDigest((unsigned char*)header->wsse__Security->UsernameToken->Password->__item,\  
                (unsigned char*)pUserInfo->password,header->wsse__Security->UsernameToken->Nonce,header->wsse__Security->UsernameToken->wsu__Created);  
  
    }  



	if (was_Action != NULL)
	{
		header->wsa__Action =(char *)malloc(1024);
		memset(header->wsa__Action, '\0', 1024);
		strncpy(header->wsa__Action, was_Action, 1024);//"http://schemas.xmlsoap.org/ws/2005/04/discovery/Probe";
	}
	if (was_To != NULL)
	{
		header->wsa__To =(char *)malloc(1024);
		memset(header->wsa__To, '\0', 1024);
		strncpy(header->wsa__To,  was_To, 1024);//"urn:schemas-xmlsoap-org:ws:2005:04:discovery";	
	}
	soap->header = header;
	return soap;
} 


int ONVIF_Capabilities()  //获取设备能力接口  
{  
          
    int retval = 0;  
    struct soap *soap = NULL;  
    struct _tds__GetCapabilities capa_req;  
    struct _tds__GetCapabilitiesResponse capa_resp;  
          
    struct SOAP_ENV__Header header;  
  
    UserInfo_S stUserInfo;  
    memset(&stUserInfo, 0, sizeof(UserInfo_S));  
   
    //正确的用户名和错误的密码  
    strcpy(stUserInfo.username, "admin");  
    strcpy(stUserInfo.password, "");  
          
    //此接口中作验证处理， 如果不需要验证的话，stUserInfo填空即可  
    soap = ONVIF_Initsoap(&header, NULL, NULL, 5, &stUserInfo);  
    char *soap_endpoint = (char *)malloc(256);  
    memset(soap_endpoint, '\0', 256);  
    //海康的设备，固定ip连接设备获取能力值 ,实际开发的时候，"172.18.14.22"地址以及80端口号需要填写在动态搜索到的具体信息  
    sprintf(soap_endpoint, "http://%s:%d/onvif/device_service", "172.18.14.22", 80);  
  
    capa_req.Category = (enum tt__CapabilityCategory *)soap_malloc(soap, sizeof(int));  
    capa_req.__sizeCategory = 1;  
    *(capa_req.Category) = (enum tt__CapabilityCategory)0;  
    //此句也可以不要，因为在接口soap_call___tds__GetCapabilities中判断了，如果此值为NULL,则会给它赋值  
    const char *soap_action = "http://www.onvif.org/ver10/device/wsdl/GetCapabilities";  
  
    do  
    {  
        soap_call___tds__GetCapabilities(soap, soap_endpoint, soap_action, &capa_req, &capa_resp);  
        if (soap->error)  
        {  
                printf("[%s][%d]--->>> soap error: %d, %s, %s\n", __func__, __LINE__, soap->error, *soap_faultcode(soap), *soap_faultstring(soap));  
                retval = soap->error;  
                break;  
        }  
        else   //获取参数成功  
        {  
            // 走到这里的时候，已经就是验证成功了，可以获取到参数了，  
            // 在实际开发的时候，可以把capa_resp结构体的那些需要的值匹配到自己的私有协议中去，简单的赋值操作就好              
              printf("[%s][%d] Get capabilities success !\n", __func__, __LINE__);  
        }  
    }while(0);  
  
    free(soap_endpoint);  
    soap_endpoint = NULL;  
    soap_destroy(soap);  
    return retval;  
}  



int ONVIF_ClientDiscovery( )
{
	int HasDev = 0;
	int retval = SOAP_OK;
	wsdd__ProbeType req;       
	struct __wsdd__ProbeMatches resp;
	wsdd__ScopesType sScope;
	struct SOAP_ENV__Header header;
	struct soap* soap;
	

	const char *was_To = "urn:schemas-xmlsoap-org:ws:2005:04:discovery";
	const char *was_Action = "http://schemas.xmlsoap.org/ws/2005/04/discovery/Probe";
	//这个就是传递过去的组播的ip地址和对应的端口发送广播信息	
	const char *soap_endpoint = "soap.udp://239.255.255.250:3702/";

	//这个接口填充一些信息并new返回一个soap对象，本来可以不用额外接口，
	// 但是后期会作其他操作，此部分剔除出来后面的操作就相对简单了,只是调用接口就好
	soap = ONVIF_Initsoap(&header, was_To, was_Action, 5);
	
	soap_default_SOAP_ENV__Header(soap, &header);
	soap->header = &header;

	soap_default_wsdd__ScopesType(soap, &sScope);
	sScope.__item = "";
	soap_default_wsdd__ProbeType(soap, &req);
	req.Scopes = &sScope;
	req.Types = ""; //"dn:NetworkVideoTransmitter";
    
	retval = soap_send___wsdd__Probe(soap, soap_endpoint, NULL, &req);		
	//发送组播消息成功后，开始循环接收各位设备发送过来的消息
	while (retval == SOAP_OK)
    {
		retval = soap_recv___wsdd__ProbeMatches(soap, &resp);
        if (retval == SOAP_OK) 
        {
            if (soap->error)
            {
                printf("[%d]: recv soap error :%d, %s, %s\n", __LINE__, soap->error, *soap_faultcode(soap), *soap_faultstring(soap)); 
			    retval = soap->error;
            }
            else //成功接收某一个设备的消息
			{
				HasDev ++;
				if (resp.wsdd__ProbeMatches->ProbeMatch != NULL && resp.wsdd__ProbeMatches->ProbeMatch->XAddrs != NULL)
				{
					printf(" ################  recv  %d devices info #### \n", HasDev );
					printf("Target Service Address  : %s\r\n", resp.wsdd__ProbeMatches->ProbeMatch->XAddrs);	
					printf("Target EP Address       : %s\r\n", resp.wsdd__ProbeMatches->ProbeMatch->wsa__EndpointReference.Address);  
					printf("Target Type             : %s\r\n", resp.wsdd__ProbeMatches->ProbeMatch->Types);  
					printf("Target Metadata Version : %d\r\n", resp.wsdd__ProbeMatches->ProbeMatch->MetadataVersion);  
					sleep(1);
				}
			}
		}
		else if (soap->error)  
		{  
			if (HasDev == 0)
			{
				printf("[%s][%s][Line:%d] Thers Device discovery or soap error: %d, %s, %s \n",__FILE__, __func__, __LINE__, soap->error, *soap_faultcode(soap), *soap_faultstring(soap)); 
				retval = soap->error;  
			}
			else 
			{
				printf(" [%s]-[%d] Search end! It has Searched %d devices! \n", __func__, __LINE__, HasDev);
				retval = 0;
			}
			break;
		}  
    }

    soap_destroy(soap); 
    soap_end(soap); 
    soap_free(soap);
	
	return retval;
}

int main(void )
{
	//组播接口 
	if (ONVIF_ClientDiscovery() != 0 )
	{
		printf("discovery failed!\n");
		return -1;
	}

	return 0;
}
